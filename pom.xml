<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

<!-- ====================================================================== -->
<!-- PROPERTIES                                                             -->
<!-- ====================================================================== -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Java version -->
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

		<!-- R01F version -->
		<!-- BEWARE! use this property on [dependencies] ONLY
					 for [artifact] versioning use maven versions plugin:
							> mvn versions:set -DnewVersion=1.0.3 -->
		<revision>0.0.1-SNAPSHOT</revision>
		<r01f.version>${revision}</r01f.version>

		<!-- Dependencies versions -->
		<aspectj.version>1.9.4</aspectj.version>
	</properties>

<!-- ====================================================================== -->
<!-- ARTIFACT                                                               -->
<!-- ====================================================================== -->
	<groupId>r01.r01f.aspect</groupId>
	<name>r01fAspect</name>
	<artifactId>r01fAspect</artifactId>
	<version>${revision}</version>
	<packaging>pom</packaging>				<!-- it's a parent project -->

<!-- ====================================================================== -->
<!-- MODULES                                                                -->
<!-- ====================================================================== -->
	<modules>
		<module>r01fAspectUtilClasses</module>
		<module>r01fDirtyTrackAspect</module>
		<module>r01fFreezableAspect</module>
		<module>r01fLazyLoadAspect</module>
		<module>r01fLoggingAspect</module>
	</modules>

<!-- ====================================================================== -->
<!-- DEPENDENCIES                                                           -->
<!-- ====================================================================== -->
	<dependencies>
		<!-- ///////////////////////////////////////// -->
		<!-- R01F                                      -->
		<!-- ///////////////////////////////////////// -->
		<dependency>
			<groupId>r01.r01f.base</groupId>
			<artifactId>r01fBaseClasses</artifactId>
			<version>${r01f.version}</version>

			<!-- exclude aspect interfaces -->
			<!-- DO NOT EXCLUDE DirtyTrackInterfaceClasses -->
			<exclusions>
				<exclusion>
					<groupId>r01.r01f.aspect.freezable</groupId>
					<artifactId>r01fFreezableInterfaceClasses</artifactId>
				</exclusion>
				<exclusion>
					<groupId>r01.r01f.aspect.lazyload</groupId>
					<artifactId>r01fLazyLoadInterfaceClasses</artifactId>
				</exclusion>
				<exclusion>
					<groupId>r01.r01f.aspect.logging</groupId>
					<artifactId>r01fLoggingInterfaceClasses</artifactId>
				</exclusion>

				<exclusion>
					<groupId>r01.r01f.objectstreamer</groupId>
					<artifactId>r01fObjectStreamerInterfaceClasses</artifactId>
				</exclusion>
				<exclusion>
		    		<groupId>javax.inject</groupId>
		    		<artifactId>javax.inject</artifactId>
				</exclusion>
				<exclusion>
					<groupId>joda-time</groupId>
					<artifactId>joda-time</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-codec</groupId>
					<artifactId>commons-codec</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

<!-- ====================================================================== -->
<!-- REPOSITORIES                                                           -->
<!-- ====================================================================== -->
	<!--
	IMPORTANT: IZENPE's root certificate MUST be installed at the jdk's [cert-store]
	[1] - Using a [web browser], goto to the repository url
		  		https://bin1.alm02.itbatera.euskadi.eus/repository/maven-public-releases/
	[2] - Check the certificate chain:
				[Izenpe.com]
					|- EAEKo Herri Administrazioen CA - CA AAPP Vascas (2)
							|- builds1.alm02.itbatera.euskadi.eus

			Download the ROOT certificate as CER files (only the [root] certificate is really needed)

	[3] - When in [eclipse], guess what is the eclipse workspace active jdk
				[window] > [preferences] > [java] > [installed JREs]

	[3] - Open a system console
			a) goto to the [jdk] bin directory
					$> cd {jdk_root}/bin
			b) run the [keytool]
				- If JRE <= 8
						$>keytool -keystore {jdk_root}\jre\lib\security\cacerts -import -file {develop_root}\projects\fabric\r01f\docs\eclipse\maven\certs\izenpe.com.cer -alias izenpe_root -storepass changeit

				- If JRE > 8
						$>keytool -keystore {jdk_root}\lib\security\cacerts -import -file {develop_root}\projects\fabric\r01f\docs\eclipse\maven\certs\izenpe.com.cer -alias izenpe_root -storepass changeit
			BEWARE!!!
				- DO NOT delete the jdk's origina keystore at {jdk_root}\jre\lib\security\cacerts since it contains the
				  most common certificate-authorities public root certificates
	-->
	<repositories>
		<repository>
			<id>EJIE</id>
			<name>EJIE Public Releases</name>
			<url>https://bin1.alm02.itbatera.euskadi.eus/repository/maven-public-releases/</url>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
				<checksumPolicy>warn</checksumPolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
				<updatePolicy>never</updatePolicy>
				<checksumPolicy>fail</checksumPolicy>
			</snapshots>
			<layout>default</layout>
		</repository>
	</repositories>


<!-- ====================================================================== -->
<!-- PLUGINS                                                                -->
<!-- ====================================================================== -->
	<build>

		<pluginManagement>
			<plugins>
				<!--
					[0] - CLEAN: https://maven.apache.org/plugins/maven-clean-plugin/
						  The Clean Plugin is used when you want to remove files generated at build-time in a project's ServiceCatalog.
				-->
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				<!--
					PHASES: see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging
						[1] - process-resources
							  process-test-resources
						[2] - test-compile
						[3] - test
						[4] - package
						[5] - install
						[6] - deploy
				-->
				<!--
					[1] - RESOURCES: https://maven.apache.org/plugins/maven-resources-plugin/
						  The Resources Plugin handles the copying of project resources to the output directory
					There are two different kinds of resources: main resources and test resources
				-->
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				<!--
					[2] - COMPILE: https://maven.apache.org/plugins/maven-compiler-plugin/
						The Compiler Plugin is used to compile the sources of your project.
				-->
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.8.1</version>
					<configuration>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.target}</target>
					</configuration>
				</plugin>
				<!--
					[3] - TEST: https://maven.apache.org/surefire/maven-surefire-plugin/
						The Surefire Plugin is used during the test phase of the build lifecycle to execute the unit tests of an application
				-->
				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.0.0-M3</version>
				</plugin>
				<!--
					[4] - PACKAGE: https://maven.apache.org/plugins/maven-war-plugin/
						The WAR Plugin is responsible for collecting all artifact dependencies, classes and resources of the web application and packaging them into a web application archive
				-->
				<plugin>
					<artifactId>maven-jar-plugin</artifactId>
					<version>3.1.1</version>	<!-- version 3.1.2 is problematic in older versions of eclipse (upgrade the maven conector from https://download.eclipse.org/m2e-wtp/releases/1.4/) -->
				</plugin>
				<!--
					[5] - INSTALL: https://maven.apache.org/plugins/maven-war-plugin/
						The Install Plugin is used during the install phase to add artifact(s) to the local repository
				-->
				<plugin>
					<artifactId>maven-install-plugin</artifactId>
					<version>3.0.0-M1</version>
				</plugin>
				<!--
					 [6] - DEPLOY: https://maven.apache.org/plugins/maven-deploy-plugin/usage.html
				-->
				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>3.0.0-M1</version>
					<executions>
						<execution>
							<id>default-deploy</id>
							<phase>deploy</phase>
							<goals>
								<goal>deploy</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- Add the [resources] dir to the compile & package phase -->
				<!-- https://www.mojohaus.org/build-helper-maven-plugin/usage.html -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>1.7</version>
					<executions>
						<execution>
							<id>add-source</id>
							<phase>generate-sources</phase>
							<goals>
								<goal>add-source</goal>
							</goals>
							<configuration>
								<sources>
									<source>src/main/aspect</source>			<!-- BEWARE!!! this is where aspect source resides -->
									<source>src/main/resources</source>
									<source>src/test/resources</source>
								</sources>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<!-- When we have a multi module build. We have a parent pom and one or more children -->
				<!-- With this plugin automatic replace parent variable version -->
				<!-- https://www.mojohaus.org/flatten-maven-plugin/usage.html -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>flatten-maven-plugin</artifactId>
					<version>1.1.0</version>
					<configuration>
						<updatePomFile>true</updatePomFile>
						<!-- <flattenMode>resolveCiFriendliesOnly</flattenMode> -->
					</configuration>
					<executions>
						<execution>
							<id>flatten</id>
							<phase>process-resources</phase>
							<goals>
								<goal>flatten</goal>
							</goals>
						</execution>
<!--
						<execution>
							<id>flatten.clean</id>
							<phase>clean</phase>
							<goals>
								<goal>clean</goal>
							</goals>
						</execution>
-->
					</executions>
				</plugin>

				<!-- Version plugin -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>2.7</version>
				</plugin>

				<!-- aspectj compiler -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>aspectj-maven-plugin</artifactId>
					<version>1.11</version>
					<configuration>
						<forceAjcCompile>true</forceAjcCompile>
						<complianceLevel>${maven.compiler.source}</complianceLevel>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.source}</target>
						<showWeaveInfo>true</showWeaveInfo>
						<verbose>true</verbose>
						<Xlint>ignore</Xlint>
						<encoding>UTF-8 </encoding>
						<!--<ajdtBuildDefFile>build.ajproperties</ajdtBuildDefFile>-->
						<aspectDirectory>src/main/aspect</aspectDirectory>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>compile</goal>	   <!-- use this goal to weave all your main classes -->
								<goal>test-compile</goal>  <!-- use this goal to weave all your test classes -->
							</goals>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>org.aspectj</groupId>
							<artifactId>aspectjrt</artifactId>
							<version>${aspectj.version}</version>
						</dependency>
						<dependency>
							<groupId>org.aspectj</groupId>
							<artifactId>aspectjtools</artifactId>
							<version>${aspectj.version}</version>
						</dependency>
					</dependencies>
				</plugin>
				<!-- Fix AspectJ lifecycle error in eclipes -->
				<!-- (see https://eureka.ykyuen.info/2013/12/18/aspectj-plugin-execution-not-covered-by-lifecycle-configuration-error-in-eclipse/) -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>aspectj-maven-plugin</artifactId>
										<versionRange>[1.0,)</versionRange>
										<goals>
											<goal>test-compile</goal>
											<goal>compile</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
									  <execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<!--
		The Resources Plugin handles the copying of project resources to the output directory
		-->
		<resources>
			<resource>
				<directory>src/main/config</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>

	</build>

<!-- ====================================================================== -->
<!-- DISTRIBUTION ARTIFACTS                                                 -->
<!-- ====================================================================== -->
	<distributionManagement>
		<repository>
			<id>maven-public-releases</id>
			<name>maven-public-releases</name>
			<layout>default</layout>
			<url>https://bin1.alm02.itbatera.euskadi.eus/repository/maven-public-releases/</url>
		</repository>
		<snapshotRepository>
			<id>maven-snapshots</id>
			<name>maven-snapshots</name>
			<layout>default</layout>
			<url>https://bin1.alm02.itbatera.euskadi.eus/repository/maven-snapshots/</url>
		</snapshotRepository>
	</distributionManagement>

</project>